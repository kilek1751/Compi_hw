%{
	#include <iostream>
	#include <stdlib.h>
	#include "output.hpp"
	extern int yylex();
	extern int yylineno;
	int yyerror(const char * message);
%}

%token LEXERROR BOOL
%token VOID INT BYTE B ENUM TRUE FALSE RETURN WHILE IF
%token BREAK CONTINUE SC COMMA LPAREN RPAREN LBRACE RBRACE
%token  ID NUM STRING
%right ASSIGN
%left OR
%left AND
%left RELEQ
%nonassoc RELOP
%left BINOPL
%left BINOPH
%right CAST
%right NOT
%left PARANS
%nonassoc THEN
%nonassoc ELSE


%%

Program	: Enums Funcs 																								{output::printProductionRule(1);};
Funcs : /*epsilon*/ 																									{output::printProductionRule(2);};
Funcs : FuncDecl Funcs 																								{output::printProductionRule(3);};
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE 	{output::printProductionRule(4);};
Enums : /*epsilon*/																										{output::printProductionRule(5);};
Enums : EnumDecl Enums 																								{output::printProductionRule(6);};
EnumDecl : ENUM ID LBRACE EnumeratorList RBRACE SC 										{output::printProductionRule(7);};
RetType : Type																												{output::printProductionRule(8);};
RetType : VOID 																												{output::printProductionRule(9);};
Formals : /*epsilon*/ 																								{output::printProductionRule(10);};
Formals : FormalsList 																								{output::printProductionRule(11);};
FormalsList : FormalDecl 																							{output::printProductionRule(12);};
FormalsList : FormalDecl COMMA FormalsList 														{output::printProductionRule(13);};
FormalDecl : Type ID 																									{output::printProductionRule(14);};
FormalDecl : EnumType ID 																							{output::printProductionRule(15);};
EnumeratorList : Enumerator 																					{output::printProductionRule(16);};
EnumeratorList : EnumeratorList COMMA Enumerator 											{output::printProductionRule(17);};
Enumerator : ID 																											{output::printProductionRule(18);};
Statements : Statement 																								{output::printProductionRule(19);};
Statements : Statements Statement 																		{output::printProductionRule(20);};
Statement : LBRACE Statements RBRACE 																	{output::printProductionRule(21);};
Statement : Type ID SC 																								{output::printProductionRule(22);};
Statement : EnumType ID SC 																						{output::printProductionRule(23);};
Statement : EnumDecl 																									{output::printProductionRule(24);};
Statement : Type ID ASSIGN Exp SC																			{output::printProductionRule(25);};
Statement : EnumType ID ASSIGN Exp SC																	{output::printProductionRule(26);};
Statement : ID ASSIGN Exp SC 																					{output::printProductionRule(27);};
Statement : Call SC 																									{output::printProductionRule(28);};
Statement : RETURN SC																									{output::printProductionRule(29);};
Statement : RETURN Exp SC																							{output::printProductionRule(30);};
Statement : IF LPAREN Exp RPAREN Statement %prec THEN									{output::printProductionRule(31);};
Statement : IF LPAREN Exp RPAREN Statement ELSE Statement							{output::printProductionRule(32);};
Statement : WHILE LPAREN Exp RPAREN Statement 												{output::printProductionRule(33);};
Statement : BREAK SC 																									{output::printProductionRule(34);};
Statement : CONTINUE SC 																							{output::printProductionRule(35);};
Call : ID LPAREN ExpList RPAREN																				{output::printProductionRule(36);};
Call : ID LPAREN RPAREN																								{output::printProductionRule(37);};
ExpList : Exp																													{output::printProductionRule(38);};
ExpList : Exp COMMA ExpList																						{output::printProductionRule(39);};
Type : INT																														{output::printProductionRule(40);};
Type : BYTE																														{output::printProductionRule(41);};
Type : BOOL																														{output::printProductionRule(42);};
EnumType : ENUM ID																										{output::printProductionRule(43);};
Exp : LPAREN Exp RPAREN																								{output::printProductionRule(44);};
Exp : Exp BINOPH Exp 																									{output::printProductionRule(45);};
Exp : Exp BINOPL Exp																									{output::printProductionRule(45);};
Exp : ID																															{output::printProductionRule(46);};
Exp : Call																														{output::printProductionRule(47);};
Exp : NUM																															{output::printProductionRule(48);};
Exp : NUM B																														{output::printProductionRule(49);};
Exp : STRING																													{output::printProductionRule(50);};
Exp : TRUE																														{output::printProductionRule(51);};
Exp : FALSE																														{output::printProductionRule(52);};
Exp : NOT Exp																													{output::printProductionRule(53);};
Exp : Exp AND Exp																											{output::printProductionRule(54);};
Exp : Exp OR Exp 																											{output::printProductionRule(55);};
Exp : Exp RELOP Exp																										{output::printProductionRule(56);};
Exp : Exp RELEQ Exp																										{output::printProductionRule(56);};
Exp : LPAREN Type RPAREN Exp %prec CAST																{output::printProductionRule(57);};

%%

int main()
{
	yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(0);
}
